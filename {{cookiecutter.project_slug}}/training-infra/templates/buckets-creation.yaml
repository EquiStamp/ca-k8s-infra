apiVersion: batch/v1
kind: Job
metadata:
  name: internal-buckets
spec:
  template:
    spec:
      containers:
      - name: internal-buckets
        image: localhost:5001/job:{% raw %}{{ .Values.environment }}{% endraw %}
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          # Configure MinIO client
          mc alias set myminio http://minio.minio-internal-{% raw %}{{ .Values.environment }}{% endraw %}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

          # Create bucket if it doesn't exist
          mc mb myminio/models --ignore-existing
          mc mb myminio/datasets --ignore-existing
        env:
  {% if cookiecutter.external_secrets %}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-username
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-password
  {% else %}
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
  {% endif %}
        - name: ENVIRONMENT
          value: {% raw %}{{ .Values.environment }}{% endraw %}
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 120  # Job will fail after 120 seconds if not completed
---
apiVersion: batch/v1
kind: Job
metadata:
  name: external-buckets
spec:
  template:
    spec:
      containers:
      - name: external-buckets
        image: ubuntu:20.04
        command:
        - /bin/bash
        - -c
        - |
          # Install required packages
          apt-get update && apt-get install -y \
            wget \
            curl


          # Install MinIO client
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          mv mc /usr/local/bin/

          # Configure MinIO client
          mc alias set myminio http://minio.minio-external-{% raw %}{{ .Values.environment }}{% endraw %}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

          # Create bucket if it doesn't exist
          mc mb myminio/models --ignore-existing
          mc mb myminio/datasets --ignore-existing
        env:
  {% if cookiecutter.external_secrets %}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-username
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-password
  {% else %}
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
  {% endif %}
        - name: ENVIRONMENT
          value: {% raw %}{{ .Values.environment }}{% endraw %}
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 120  # Job will fail after 120 seconds if not completed
---
{% if cookiecutter.network_policies %}
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: external-buckets-job-policy
spec:
  # Apply to the external-buckets job
  endpointSelector:
    matchLabels:
      job-name: external-buckets
  egress:
    # Allow access to package repositories for apt
    - toFQDNs:
        - matchPattern: "*.ubuntu.com"
        - matchPattern: "*.debian.org"
        - matchPattern: "*.archive.ubuntu.com"
        - matchPattern: "archive.ubuntu.com"
        - matchPattern: "security.ubuntu.com"
        - matchPattern: "ppa.launchpad.net"
      toPorts:
        - ports:
            - port: "80"
              protocol: TCP
            - port: "443"
              protocol: TCP
    # Allow access to MinIO client download
    - toFQDNs:
        - matchPattern: "dl.min.io"
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
            - port: "80"
              protocol: TCP
---
{% endif %}
