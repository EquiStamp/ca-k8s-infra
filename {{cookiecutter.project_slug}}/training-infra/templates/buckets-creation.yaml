apiVersion: batch/v1
kind: Job
metadata:
  name: internal-buckets
spec:
  template:
    spec:
      containers:
      - name: internal-buckets
        image: localhost:5001/job:{% raw %}{{ .Values.environment }}{% endraw %}
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          # Configure MinIO client
          mc alias set myminio http://minio.minio-internal-{% raw %}{{ .Values.environment }}{% endraw %}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

          # Create bucket if it doesn't exist
          mc mb myminio/models --ignore-existing
          mc mb myminio/datasets --ignore-existing

  {%- if cookiecutter.rbac %}

          # Create policy file
          cat > /tmp/bucket_policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowListDatasetsBucket",
                "Effect": "Allow",
                "Action": ["s3:ListBucket"],
                "Resource": "arn:aws:s3:::datasets"
              },
              {
                "Sid": "AllowReadFromDatasets",
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:GetObjectVersion"
                ],
                "Resource": "arn:aws:s3:::datasets/*"
              },
              {
                "Sid": "AllowWriteToModels",
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject"
                ],
                "Resource": "arn:aws:s3:::models/*"
              }
            ]
          }
          EOF

          # Create policy in MinIO
          mc admin policy create myminio bucket-policy /tmp/bucket_policy.json

          # Create MinIO user for Ray worker
          mc admin user add myminio ${RAY_WORKER_MINIO_ACCESS_KEY_ID} ${RAY_WORKER_MINIO_SECRET_ACCESS_KEY}

          # Assign policy to user
          mc admin policy attach myminio bucket-policy --user ${RAY_WORKER_MINIO_ACCESS_KEY_ID}
  {%- endif %}
        env:
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
  {%- if cookiecutter.rbac %}
        - name: RAY_WORKER_MINIO_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: ray-worker-minio-credentials
              key: ACCESS_KEY_ID
        - name: RAY_WORKER_MINIO_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: ray-worker-minio-credentials
              key: SECRET_ACCESS_KEY
  {%- endif %}
        - name: ENVIRONMENT
          value: {% raw %}{{ .Values.environment }}{% endraw %}
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 120  # Job will fail after 120 seconds if not completed
---
apiVersion: batch/v1
kind: Job
metadata:
  name: external-buckets
spec:
  template:
    spec:
      containers:
      - name: external-buckets
        image: ubuntu:20.04
        command:
        - /bin/bash
        - -c
        - |
          # Install required packages
          apt-get update && apt-get install -y \
            wget \
            curl

          # Install MinIO client
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          mv mc /usr/local/bin/

          # Configure MinIO client
          mc alias set myminio http://minio.minio-external-{% raw %}{{ .Values.environment }}{% endraw %}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

          # Create bucket if it doesn't exist
          mc mb myminio/models --ignore-existing
          mc mb myminio/datasets --ignore-existing
        env:
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
        - name: ENVIRONMENT
          value: {% raw %}{{ .Values.environment }}{% endraw %}
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 120  # Job will fail after 120 seconds if not completed
---
{%- if cookiecutter.rbac %}
apiVersion: v1
kind: Secret
metadata:
  name: ray-worker-minio-credentials
data:
  ACCESS_KEY_ID: {% raw %}{{ "rayworker" | b64enc | quote }}{% endraw %}
  SECRET_ACCESS_KEY: {% raw %}{{{% endraw %} "{{ random_ascii_string(20) }}" {% raw %}| b64enc | quote }}{% endraw %}
---
{%- endif %}
{%- if cookiecutter.network_policies %}
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: external-buckets-job-policy
spec:
  # Apply to the external-buckets job
  endpointSelector:
    matchLabels:
      job-name: external-buckets
  egress:
    # Allow access to package repositories for apt
    - toFQDNs:
        - matchPattern: "*.ubuntu.com"
        - matchPattern: "*.debian.org"
        - matchPattern: "*.archive.ubuntu.com"
        - matchPattern: "archive.ubuntu.com"
        - matchPattern: "security.ubuntu.com"
        - matchPattern: "ppa.launchpad.net"
      toPorts:
        - ports:
            - port: "80"
              protocol: TCP
            - port: "443"
              protocol: TCP
    # Allow access to MinIO client download
    - toFQDNs:
        - matchPattern: "dl.min.io"
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
            - port: "80"
              protocol: TCP
---
{%- endif %}
