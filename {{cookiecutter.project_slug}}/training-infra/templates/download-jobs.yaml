apiVersion: batch/v1
kind: Job
metadata:
  name: model-sync
spec:
  template:
    spec:
      containers:
      - name: model-sync
        image: localhost:5001/job:{% raw %}{{ .Values.environment }}{% endraw %}
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          # Configure MinIO client
          mc alias set myminio http://minio.minio-internal-{% raw %}{{ .Values.environment }}{% endraw %}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

          # Create bucket if it doesn't exist
          mc mb myminio/models --ignore-existing

          # Upload to MinIO
          mc cp -r /volumes/model-small/ myminio/models/model-small/

          # Cleanup
          rm -rf /tmp/model
        env:
  {% if cookiecutter.external_secrets %}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-username
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-password
  {% else %}
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
  {% endif %}
        - name: ENVIRONMENT
          value: {% raw %}{{ .Values.environment }}{% endraw %}
        volumeMounts:
        - name: model-volume
          mountPath: /volumes/model-small
          readOnly: true
      volumes:
      - name: model-volume
        hostPath:
          path: /volumes/huggingface/models/model-small
          type: Directory
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 120  # Job will fail after 120 seconds if not completed
---
apiVersion: batch/v1
kind: Job
metadata:
  name: stanfordnlp-imdb-dataset-sync
spec:
  template:
    spec:
      containers:
      - name: dataset-sync
        image: localhost:5001/job:{% raw %}{{ .Values.environment }}{% endraw %}
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          # Configure MinIO client
          mc alias set myminio http://minio.minio-internal-{% raw %}{{ .Values.environment }}{% endraw %}.svc.cluster.local:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

          # Create bucket if it doesn't exist
          mc mb myminio/datasets --ignore-existing
          
          # Upload to MinIO
          mc cp -r /volumes/imdb/ myminio/datasets/imdb/
          
          echo "Dataset transfer complete"
        env:
  {% if cookiecutter.external_secrets %}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-username
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: minio-password
  {% else %}
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
  {% endif %}
        - name: ENVIRONMENT
          value: {% raw %}{{ .Values.environment }}{% endraw %}
        volumeMounts:
        - name: dataset-volume
          mountPath: /volumes/imdb
          readOnly: true
      volumes:
      - name: dataset-volume
        hostPath:
          path: /volumes/huggingface/datasets/imdb
          type: Directory
      restartPolicy: Never
  backoffLimit: 4
  activeDeadlineSeconds: 120  # Job will fail after 120 seconds if not completed
---
{% if cookiecutter.cilium_network_policies %}
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: download-jobs-policy
spec:
  # Apply to all download jobs
  endpointSelector:
    matchExpressions:
      - {key: job-name, operator: In, values: [stanfordnlp-imdb-dataset-sync, pythia-70m-model-sync]}
  egress:
    # Allow access to Hugging Face API and related services for downloads
    - toFQDNs:
        - matchName: "huggingface.co"
        - matchPattern: "*.huggingface.co"
        - matchPattern: "*.hf.co"
      toPorts:
        - ports:
            - port: "443"
              protocol: TCP
---
{% endif %}
