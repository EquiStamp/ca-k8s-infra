{% if cookiecutter.file_integrity %}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: tetragon-monitor
  labels:
    app: tetragon-monitor
spec:
  selector:
    matchLabels:
      app: tetragon-monitor
  template:
    metadata:
      labels:
        app: tetragon-monitor
    spec:
      containers:
      - name: tetragon
        image: quay.io/cilium/tetragon:v1.4.0
        imagePullPolicy: IfNotPresent
        command: ["tetragon"]
        args:
        - "--btf=/sys/kernel/btf/vmlinux"
        - "--export-allowlist={\"event_set\":[\"PROCESS_EXEC\",\"PROCESS_EXIT\",\"PROCESS_KPROBE\"]}"
        - --tracing-policy-dir=/etc/tetragon
        resources:
          limits:
            cpu: {% raw %}{{ .Values.tetragon.resources.limits.cpu | default "500m" }}{% endraw %}
            memory: {% raw %}{{ .Values.tetragon.resources.limits.memory | default "500Mi" }}{% endraw %}
          requests:
            cpu: {% raw %}{{ .Values.tetragon.resources.requests.cpu | default "100m" }}{% endraw %}
            memory: {% raw %}{{ .Values.tetragon.resources.requests.memory | default "100Mi" }}{% endraw %}
        securityContext:
          privileged: true
        volumeMounts:
        - name: host-procfs
          mountPath: /procHost
          readOnly: true
        - name: bpf-fs
          mountPath: /sys/fs/bpf
        - name: kernel-debug
          mountPath: /sys/kernel/debug
        - name: run-dir
          mountPath: /var/run/cilium
        - name: config-volume
          mountPath: /etc/tetragon/tetragon
      volumes:
      - name: host-procfs
        hostPath:
          path: /proc
          type: Directory
      - name: bpf-fs
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      - name: kernel-debug
        hostPath:
          path: /sys/kernel/debug
          type: DirectoryOrCreate
      - name: run-dir
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
      - name: config-volume
        configMap:
          name: tetragon-file-monitoring-policy
          optional: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tetragon-file-monitoring-policy
data:
  tetragon-file-monitoring.yaml: |
    apiVersion: cilium.io/v1alpha1
    kind: TracingPolicy
    metadata:
      name: "file-integrity-monitoring"
    spec:
      kprobes:
      # Monitor file access permissions (read/write)
      - call: "security_file_permission"
        syscall: false
        return: true
        args:
        - index: 0
          type: "file"
        - index: 1
          type: "int"
        returnArg:
          index: 0
          type: "int"
        returnArgAction: "Post"
        selectors:
        - matchArgs:      
          - index: 0
            operator: "Prefix"
            values:
            {% raw %}{{- range .Values.tetragon.fileMonitoring.readProtectedPaths }}
            - "{{ . }}"
            {{- end }}{% endraw %}
          - index: 1
            operator: "Equal"
            values:
            - "4"  # MAY_READ
          {% raw %}{{- if .Values.tetragon.fileMonitoring.sigkillProtectedRead }}
          matchActions:
          - action: Sigkill
          {{- end }}{% endraw %}
        - matchArgs:      
          - index: 0
            operator: "Prefix"
            values:
            {% raw %}{{- range .Values.tetragon.fileMonitoring.writeProtectedPaths }}
            - "{{ . }}"
            {{- end }}{% endraw %}
          - index: 1
            operator: "Equal"
            values:
            - "2"  # MAY_WRITE
          {% raw %}{{- if .Values.tetragon.fileMonitoring.sigkillProtectedWrite }}
          matchActions:
          - action: Sigkill
          {{- end }}{% endraw %}
      
      # Monitor file reads/modifications via memory mapping
      - call: "security_mmap_file"
        syscall: false
        return: true
        args:
        - index: 0
          type: "file" # (struct file *) used for getting the path
        - index: 1
          type: "uint32" # the prot flags PROT_READ(0x01), PROT_WRITE(0x02), PROT_EXEC(0x04)
        - index: 2
          type: "uint32" # the mmap flags (i.e. MAP_SHARED, ...)
        returnArg:
          index: 0
          type: "int"
        returnArgAction: "Post"
        selectors:
        - matchArgs:
          - index: 0
            operator: "Prefix"
            values:
            {% raw %}{{- range .Values.tetragon.fileMonitoring.readProtectedPaths }}
            - "{{ . }}"
            {{- end }}{% endraw %}
          - index: 1
            operator: "Equal"
            values:
            - "1"  # MAY_READ
          - index: 2
            operator: "Mask"
            values:
              - "1" # MAP_SHARED
          {% raw %}{{- if .Values.tetragon.fileMonitoring.sigkillProtectedRead }}
          matchActions:
          - action: Sigkill
          {{- end }}{% endraw %}
        - matchArgs:
          - index: 0
            operator: "Prefix"
            values:
            {% raw %}{{- range .Values.tetragon.fileMonitoring.writeProtectedPaths }}
            - "{{ . }}"
            {{- end }}{% endraw %}
          - index: 1
            operator: "Mask"
            values:
            - "2"  # PROT_WRITE
          - index: 2
            operator: "Mask"
            values:
              - "1" # MAP_SHARED
          {% raw %}{{- if .Values.tetragon.fileMonitoring.sigkillProtectedWrite }}
          matchActions:
          - action: Sigkill
          {{- end }}{% endraw %}
      
      # Monitor file modifications via truncate
      - call: "security_path_truncate"
        syscall: false
        return: true
        args:
        - index: 0
          type: "path"
        returnArg:
          index: 0
          type: "int"
        returnArgAction: "Post"
        selectors:
        - matchArgs:
          - index: 0
            operator: "Prefix"
            values:
            {% raw %}{{- range .Values.tetragon.fileMonitoring.writeProtectedPaths }}
            - "{{ . }}"
            {{- end }}{% endraw %}
          {% raw %}{{- if .Values.tetragon.fileMonitoring.sigkillProtectedWrite }}
          matchActions:
          - action: Sigkill
          {{- end }}{% endraw %}
{% endif %}
